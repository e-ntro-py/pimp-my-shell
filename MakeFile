BIN="./bin"
SRC=$(shell find . -name "*.go")
CURRENT_TAG=$(shell git describe --tags --abbrev=0)

ifeq (, $(shell which golangci-lint))
$(warning "could not find golangci-lint in $(PATH), run: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh")
endif

ifeq (, $(shell which richgo))
$(warning "could not find richgo in $(PATH), run: go get github.com/kyoh86/richgo")
endif

.PHONY: fmt lint test clean compile chmodX compress

default: all

all: fmt lint test release

release: clean compile chmodX compress

fmt:
	$(info ******************** checking formatting ********************)
	@test -z $(shell gofmt -l $(SRC)) || (gofmt -d $(SRC); exit 1)

lint:
	$(info ******************** running lint tools ********************)
	golangci-lint run -c .golangci-lint.yml -v ./...

test:
	$(info ******************** running tests ********************)
	richgo test -v ./...

clean:
	rm -rf $(BIN) 2>/dev/null

compile:
	GOOS=linux GOARCH=amd64 go build -o bin/linux/amd64/pimp-my-shell-$(CURRENT_TAG)-linux-amd64 main.go
	GOOS=linux GOARCH=arm64 go build -o bin/linux/arm64/pimp-my-shell-$(CURRENT_TAG)-linux-arm64 main.go
	GOOS=darwin GOARCH=amd64 go build -o bin/darwin/amd64/pimp-my-shell-$(CURRENT_TAG)-x86_64-apple-darwin_amd64 main.go
	GOOS=darwin GOARCH=arm64 go build -o bin/darwin/arm64/pimp-my-shell-$(CURRENT_TAG)-x86_64-apple-darwin_arm64 main.go

chmodX:
	chmod +x bin/linux/amd64/pimp-my-shell-$(CURRENT_TAG)-linux-amd64
	chmod +x bin/linux/arm64/pimp-my-shell-$(CURRENT_TAG)-linux-arm64
	chmod +x bin/darwin/amd64/pimp-my-shell-$(CURRENT_TAG)-x86_64-apple-darwin_amd64
	chmod +x bin/darwin/arm64/pimp-my-shell-$(CURRENT_TAG)-x86_64-apple-darwin_arm64

compress:
	gzip -9 bin/linux/amd64/pimp-my-shell-$(CURRENT_TAG)-linux-amd64
	gzip -9 bin/linux/arm64/pimp-my-shell-$(CURRENT_TAG)-linux-arm64
	gzip -9 bin/darwin/amd64/pimp-my-shell-$(CURRENT_TAG)-x86_64-apple-darwin_amd64
	gzip -9 bin/darwin/arm64/pimp-my-shell-$(CURRENT_TAG)-x86_64-apple-darwin_arm64
