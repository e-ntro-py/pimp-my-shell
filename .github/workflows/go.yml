name: CI

on:
  push:
    tags:
      - '*'
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - id: go-cache-paths
        run: |
          echo "::set-output name=gobuild::$(go env GOCACHE)"
          echo "::set-output name=gomod::$(go env GOMODCACHE)"

      # Cache go build cache
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gobuild }}
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gomod }}
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go get github.com/mattn/go-isatty@v0.0.12

      # Run build of the application
      - name: Run build
        run: |
          make -f MakeFile build

  test:
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - id: go-cache-paths
        run: |
          echo "::set-output name=gobuild::$(go env GOCACHE)"
          echo "::set-output name=gomod::$(go env GOMODCACHE)"

      # Cache go build cache
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gobuild }}
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gomod }}
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go get github.com/mattn/go-isatty@v0.0.12

      # Run Tests
      - name: Tests
        run: |
          make -f MakeFile build
          make -f MakeFile test || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the original go test log as an artifact for later review.
      - name: Upload test log
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-log
          path: coverage/gotest.log
          if-no-files-found: error

  run-pimp-my-shell:
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - id: go-cache-paths
        run: |
          echo "::set-output name=gobuild::$(go env GOCACHE)"
          echo "::set-output name=gomod::$(go env GOMODCACHE)"

      # Cache go build cache
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gobuild }}
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gomod }}
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}

      - name: Go Build
        run: |
          go get github.com/mattn/go-isatty@v0.0.12
          make -f MakeFile build

      - name: Run pimp-my-shell
        run: |
          echo "::group::Pimp My Shell"
          ./pimp-my-shell
          echo "::endgroup::"
          echo "::group::Final ZSHRC"
          cat "$HOME/.zshrc"
          echo "::endgroup::"


  generate-milestone:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: Get Previous tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: v1.0.0 # Optional fallback tag to use when no tag can be found
      - name: Get next minor version
        id: semvers
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: Create new milestone
        id: createmilestone
        uses: WyriHaximus/github-action-create-milestone@v1
        with:
          title: ${{ steps.semvers.outputs.patch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ================
  # RELEASE JOB
  #   runs after a successful build
  #   only runs on push "v*" tag
  # ================
  release:
    needs: [build, test, run-pimp-my-shell]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1000

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - id: go-cache-paths
        run: |
          echo "::set-output name=gobuild::$(go env GOCACHE)"
          echo "::set-output name=gomod::$(go env GOMODCACHE)"

      # Cache go build cache
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gobuild }}
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.gomod }}
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go get github.com/mattn/go-isatty@v0.0.12

      - name: Generate Binaries
        id: binaries
        run: |
          make -f MakeFile release

      - name: Get current tag name
        run: |
          echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))" >> $GITHUB_ENV

      - name: "Build Changelog"
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          configuration: ".github/configuration_repo.json"
          owner: "mr-pmillz"
          repo: "pimp-my-shell"
          fromTag: ${{ env.PREVIOUS_TAG }}
          toTag: ${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          body: ${{steps.github_release.outputs.changelog}}
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
          files: |
            bin/linux/amd64/pimp-my-shell-${{ env.TAG }}-linux-amd64.gz
            bin/linux/arm64/pimp-my-shell-${{ env.TAG }}-linux-arm64.gz
            bin/darwin/amd64/pimp-my-shell-${{ env.TAG }}-x86_64-apple-darwin_amd64.gz
            bin/darwin/arm64/pimp-my-shell-${{ env.TAG }}-x86_64-apple-darwin_arm64.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
